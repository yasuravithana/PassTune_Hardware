CCS PCH C Compiler, Version 4.114, 93460303               06-Apr-12 14:51

               Filename: e:\sem 3\en\tronic project\c src\test\test timer.lst

               ROM used: 698 bytes (2%)
                         Largest free fragment is 32066
               RAM used: 46 (3%) at main() level
                         46 (3%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  GOTO   01D0
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00D2
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   00E8
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   00EE
0078:  BTFSS  FF0.4
007A:  GOTO   0084
007E:  BTFSC  FF0.1
0080:  GOTO   00F4
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVFF  15,FF5
00BE:  MOVFF  16,FF6
00C2:  MOVFF  17,FF7
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <test timer.h> 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOOSCSEN              	//Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
00FA:  CLRF   FEA
00FC:  MOVLW  2C
00FE:  MOVWF  FE9
0100:  MOVF   FEF,W
0102:  BZ    011E
0104:  MOVLW  06
0106:  MOVWF  01
0108:  CLRF   00
010A:  DECFSZ 00,F
010C:  BRA    010A
010E:  DECFSZ 01,F
0110:  BRA    0108
0112:  MOVLW  7B
0114:  MOVWF  00
0116:  DECFSZ 00,F
0118:  BRA    0116
011A:  DECFSZ FEF,F
011C:  BRA    0104
011E:  GOTO   017A (RETURN)
....................  
....................  
....................  
.................... int32 readInt(void); 
.................... void writeInt(void); 
.................... void store(void); 
....................  
....................  
.................... int32  t=0; 
.................... int count,hit; 
.................... int16 ramStart=0x50; 
.................... int32 *ramNow; 
....................  
.................... // Variable declarations for functions (mainly for EEPROM write/read functions) 
.................... int32 value; 
.................... int8 i,j; 
.................... byte addressEEPROM; 
.................... byte* addressRAM; 
....................  
....................  
.................... #int_TIMER2 
.................... void  TIMER2_isr(void)  
.................... { 
.................... t++; 
*
00D2:  MOVLW  01
00D4:  ADDWF  19,F
00D6:  BTFSC  FD8.0
00D8:  INCF   1A,F
00DA:  BTFSC  FD8.2
00DC:  INCF   1B,F
00DE:  BTFSC  FD8.2
00E0:  INCF   1C,F
.................... } 
....................  
00E2:  BCF    F9E.1
00E4:  GOTO   0084
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................  
.................... } 
....................  
00E8:  BCF    FF2.1
00EA:  GOTO   0084
.................... #int_EXT1 
.................... void  EXT1_isr(void)  
.................... { 
....................  
.................... } 
....................  
00EE:  BCF    FF0.0
00F0:  GOTO   0084
.................... #int_EXT2 
.................... void  EXT2_isr(void)  
.................... { 
....................  
.................... } 
....................  
....................  
....................  
00F4:  BCF    FF0.1
00F6:  GOTO   0084
.................... void main() 
.................... { 
*
01D0:  CLRF   FF8
01D2:  BCF    FD0.7
01D4:  BSF    07.7
01D6:  CLRF   FEA
01D8:  CLRF   FE9
01DA:  CLRF   1C
01DC:  CLRF   1B
01DE:  CLRF   1A
01E0:  CLRF   19
01E2:  CLRF   20
01E4:  MOVLW  50
01E6:  MOVWF  1F
01E8:  BSF    FC1.0
01EA:  BSF    FC1.1
01EC:  BSF    FC1.2
01EE:  BCF    FC1.3
....................  
.................... set_tris_D(0); 
01F0:  MOVLW  00
01F2:  MOVWF  F95
....................  
.................... setup_timer_2(T2_DIV_BY_1,249,16);      //50.0 us overflow, 800 us interrupt 
01F4:  MOVLW  78
01F6:  IORLW  04
01F8:  MOVWF  FCA
01FA:  MOVLW  F9
01FC:  MOVWF  FCB
....................   // setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
....................    enable_interrupts(INT_TIMER2); 
01FE:  BSF    F9D.1
....................    enable_interrupts(INT_EXT); 
0200:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1); 
0202:  BSF    FF0.3
....................    enable_interrupts(INT_EXT2); 
0204:  BSF    FF0.4
....................    enable_interrupts(GLOBAL); 
0206:  MOVLW  C0
0208:  IORWF  FF2,F
....................  
.................... ramNow=ramStart; 
020A:  MOVFF  20,22
020E:  MOVFF  1F,21
....................  
.................... while(input(pin_A0)==0) 
.................... { 
0212:  BSF    F92.0
0214:  BTFSC  F80.0
0216:  BRA    021A
.................... } 
0218:  BRA    0212
.................... t=0; 
021A:  CLRF   1C
021C:  CLRF   1B
021E:  CLRF   1A
0220:  CLRF   19
.................... hit=1;count=0; 
0222:  MOVLW  01
0224:  MOVWF  1E
0226:  CLRF   1D
.................... output_high(pin_D3); 
0228:  BCF    F95.3
022A:  BSF    F8C.3
.................... WRITE_EEPROM(0x00,0x45); 
022C:  CLRF   FA9
022E:  MOVLW  45
0230:  MOVWF  FA8
0232:  BCF    FA6.6
0234:  BCF    FA6.7
0236:  BSF    FA6.2
0238:  MOVF   FF2,W
023A:  MOVWF  00
023C:  BCF    FF2.7
023E:  MOVLB  F
0240:  MOVLW  55
0242:  MOVWF  FA7
0244:  MOVLW  AA
0246:  MOVWF  FA7
0248:  BSF    FA6.1
024A:  BTFSC  FA6.1
024C:  BRA    024A
024E:  BCF    FA6.2
0250:  MOVF   00,W
0252:  IORWF  FF2,F
.................... while(true) 
.................... { 
.................... if((hit==0&&(input(pin_A0)==1))||(hit==1&&(input(pin_A0)==0))) 
0254:  MOVF   1E,F
0256:  BNZ   025E
0258:  BSF    F92.0
025A:  BTFSC  F80.0
025C:  BRA    0268
025E:  DECFSZ 1E,W
0260:  BRA    029E
0262:  BSF    F92.0
0264:  BTFSC  F80.0
0266:  BRA    029E
.................... { 
....................    //output_toggle(pin_D3);//test 
....................    if(hit==1) 
0268:  DECFSZ 1E,W
026A:  BRA    0270
....................       hit=0; 
026C:  CLRF   1E
....................    else 
026E:  BRA    0274
....................       hit=1; 
0270:  MOVLW  01
0272:  MOVWF  1E
....................    *ramNow=t; 
0274:  MOVFF  21,FE9
0278:  MOVFF  22,FEA
027C:  MOVFF  19,FEF
0280:  MOVFF  1A,FEC
0284:  MOVFF  1B,FEC
0288:  MOVFF  1C,FEC
....................    ramNow++;count++; 
028C:  MOVLW  04
028E:  ADDWF  21,F
0290:  BTFSC  FD8.0
0292:  INCF   22,F
0294:  INCF   1D,F
....................    t=0; 
0296:  CLRF   1C
0298:  CLRF   1B
029A:  CLRF   1A
029C:  CLRF   19
....................    //delay_ms(1000); 
.................... } 
....................  
.................... //testing 
.................... if(input(pin_A1)==1) 
029E:  BSF    F92.1
02A0:  BTFSS  F80.1
02A2:  BRA    02B4
.................... { 
.................... output_high(pin_D2); 
02A4:  BCF    F95.2
02A6:  BSF    F8C.2
....................  
....................    output_high(pin_D2); 
02A8:  BCF    F95.2
02AA:  BSF    F8C.2
....................    store();    
02AC:  MOVLB  0
02AE:  BRA    0182
....................    break; 
02B0:  BRA    02B8
02B2:  MOVLB  F
.................... } 
.................... //testing ends 
....................   
.................... } 
02B4:  BRA    0254
02B6:  MOVLB  0
.................... output_low(pin_D2); 
02B8:  BCF    F95.2
02BA:  BCF    F8C.2
....................  
.................... } 
....................  
....................  
.................... // here the 'addressEEPROM is incremented within the' writeInt()' function. 
.................... void store() 
.................... { 
02BC:  SLEEP 
....................    ramNow=ramStart; 
*
0182:  MOVFF  20,22
0186:  MOVFF  1F,21
....................    addressEEPROM=0x1; 
018A:  MOVLW  01
018C:  MOVWF  29
....................    for(j=0;j<count;j++) 
018E:  CLRF   28
0190:  MOVF   1D,W
0192:  SUBWF  28,W
0194:  BC    01CC
....................    { 
....................        value=*ramNow; 
0196:  MOVFF  21,FE9
019A:  MOVFF  22,FEA
019E:  MOVFF  FEF,00
01A2:  MOVFF  FEC,01
01A6:  MOVFF  FEC,02
01AA:  MOVFF  FEC,03
01AE:  MOVFF  03,26
01B2:  MOVFF  02,25
01B6:  MOVFF  01,24
01BA:  MOVFF  00,23
....................        writeInt(); 
01BE:  BRA    0122
....................        ramNow++; 
01C0:  MOVLW  04
01C2:  ADDWF  21,F
01C4:  BTFSC  FD8.0
01C6:  INCF   22,F
....................    } 
01C8:  INCF   28,F
01CA:  BRA    0190
.................... } 
01CC:  GOTO   02B8 (RETURN)
....................  
....................  
.................... // global variable 'addressEEPROM' should be set to the starting address of the int in EEPROM 
.................... int32 readInt() 
.................... { 
....................    addressRAM = &value; 
....................    for(i=0;i<4;i++) 
....................    { 
....................       *addressRAM = READ_EEPROM(addressEEPROM); 
....................       addressRAM++; 
....................       addressEEPROM++; 
....................    } 
....................    return value; 
.................... } 
....................  
.................... // global variable 'addressEEPROM' should be set to the starting address of the int in EEPROM and 'value' to the int to be written 
.................... void writeInt() 
.................... { 
....................    addressRAM = &value; 
*
0122:  CLRF   2B
0124:  MOVLW  23
0126:  MOVWF  2A
....................    for(i=0;i<4;i++) 
0128:  CLRF   27
012A:  MOVF   27,W
012C:  SUBLW  03
012E:  BNC   017E
....................    { 
....................       WRITE_EEPROM(addressEEPROM,*addressRAM); 
0130:  MOVFF  2B,03
0134:  MOVF   2A,W
0136:  MOVWF  FE9
0138:  MOVFF  03,FEA
013C:  MOVFF  FEF,2C
0140:  MOVFF  29,FA9
0144:  MOVFF  2C,FA8
0148:  BCF    FA6.6
014A:  BCF    FA6.7
014C:  BSF    FA6.2
014E:  MOVF   FF2,W
0150:  MOVWF  00
0152:  BCF    FF2.7
0154:  MOVLB  F
0156:  MOVLW  55
0158:  MOVWF  FA7
015A:  MOVLW  AA
015C:  MOVWF  FA7
015E:  BSF    FA6.1
0160:  BTFSC  FA6.1
0162:  BRA    0160
0164:  BCF    FA6.2
0166:  MOVF   00,W
0168:  IORWF  FF2,F
....................       addressRAM++; 
016A:  INCF   2A,F
016C:  BTFSC  FD8.2
016E:  INCF   2B,F
....................       addressEEPROM++; 
0170:  INCF   29,F
....................       DELAY_MS(8); 
0172:  MOVLW  08
0174:  MOVWF  2C
0176:  MOVLB  0
0178:  BRA    00FA
....................    } 
017A:  INCF   27,F
017C:  BRA    012A
....................     
....................     
.................... } 
017E:  GOTO   01C0 (RETURN)

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
