CCS PCH C Compiler, Version 4.114, 93460303               08-Apr-12 22:52

               Filename: E:\sem 3\EN\tronic project\c src\1.0.lst

               ROM used: 1338 bytes (4%)
                         Largest free fragment is 31426
               RAM used: 51 (3%) at main() level
                         54 (4%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
0000:  GOTO   04B8
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00D2
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   00FC
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   0170
0078:  BTFSS  FF0.4
007A:  GOTO   0084
007E:  BTFSC  FF0.1
0080:  GOTO   0176
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVFF  15,FF5
00BE:  MOVFF  16,FF6
00C2:  MOVFF  17,FF7
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
....................  
.................... /* 
.................... 20MHz crystal 
.................... timer2 interrupts at 800us 
.................... int0,1,2 enabled 
.................... portD is output 
.................... A0 is the touch input 
.................... */ 
....................  
.................... /*usable RAM addresses starts from 0x019 variables declared in the code starts from here*/ 
....................  
....................  
.................... #include <1.0.h> 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOOSCSEN              	//Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
017C:  CLRF   FEA
017E:  MOVLW  32
0180:  MOVWF  FE9
0182:  MOVF   FEF,W
0184:  BZ    01A0
0186:  MOVLW  06
0188:  MOVWF  01
018A:  CLRF   00
018C:  DECFSZ 00,F
018E:  BRA    018C
0190:  DECFSZ 01,F
0192:  BRA    018A
0194:  MOVLW  7B
0196:  MOVWF  00
0198:  DECFSZ 00,F
019A:  BRA    0198
019C:  DECFSZ FEF,F
019E:  BRA    0186
01A0:  RETLW  00
....................  
....................  
....................  
.................... #define inputDelay 100 
....................  
.................... int32 readInt(void); 
.................... void writeInt(void); 
.................... void store(void); 
.................... void check(void); 
.................... void storePassword(void); 
.................... void checkPassword(void); 
....................  
.................... int32  t=0; 
.................... int count,hit,timerReset=0; 
.................... int16 ramStart=0x50; 
.................... int32 *ramNow; 
.................... int32 touch; 
....................  
.................... // Variable declarations for functions (mainly for EEPROM write/read functions) 
.................... int32 value; 
.................... int8 i,j; 
.................... byte addressEEPROM; 
.................... byte* addressRAM; 
....................  
....................  
....................  
.................... #int_TIMER2 
.................... void  TIMER2_isr(void)  
.................... { 
....................    if(timerReset==0) 
*
00D2:  MOVF   1F,F
00D4:  BNZ   00E8
....................       t++; 
00D6:  MOVLW  01
00D8:  ADDWF  19,F
00DA:  BTFSC  FD8.0
00DC:  INCF   1A,F
00DE:  BTFSC  FD8.2
00E0:  INCF   1B,F
00E2:  BTFSC  FD8.2
00E4:  INCF   1C,F
....................    else 
00E6:  BRA    00F6
....................    { 
....................       t=0; 
00E8:  CLRF   1C
00EA:  CLRF   1B
00EC:  CLRF   1A
00EE:  CLRF   19
....................       timerReset=0; 
00F0:  CLRF   1F
....................       output_toggle(pin_D6);//test 
00F2:  BCF    F95.6
00F4:  BTG    F8C.6
....................    } 
....................        
.................... } 
....................  
00F6:  BCF    F9E.1
00F8:  GOTO   0084
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................    if(READ_EEPROM(0x0)==0) 
00FC:  MOVFF  FF2,34
0100:  BCF    FF2.7
0102:  CLRF   FA9
0104:  BCF    FA6.6
0106:  BCF    FA6.7
0108:  BSF    FA6.0
010A:  MOVF   FA8,W
010C:  BTFSC  34.7
010E:  BSF    FF2.7
0110:  XORLW  00
0112:  BNZ   0140
....................    { 
....................       WRITE_EEPROM(0x0,1); 
0114:  CLRF   FA9
0116:  MOVLW  01
0118:  MOVWF  FA8
011A:  BCF    FA6.6
011C:  BCF    FA6.7
011E:  BSF    FA6.2
0120:  MOVF   FF2,W
0122:  MOVWF  00
0124:  BCF    FF2.7
0126:  MOVLB  F
0128:  MOVLW  55
012A:  MOVWF  FA7
012C:  MOVLW  AA
012E:  MOVWF  FA7
0130:  BSF    FA6.1
0132:  BTFSC  FA6.1
0134:  BRA    0132
0136:  BCF    FA6.2
0138:  MOVF   00,W
013A:  IORWF  FF2,F
....................    } 
....................     
....................    else 
013C:  BRA    0166
013E:  MOVLB  0
....................    { 
....................       WRITE_EEPROM(0x0,0); 
0140:  CLRF   FA9
0142:  CLRF   FA8
0144:  BCF    FA6.6
0146:  BCF    FA6.7
0148:  BSF    FA6.2
014A:  MOVF   FF2,W
014C:  MOVWF  00
014E:  BCF    FF2.7
0150:  MOVLB  F
0152:  MOVLW  55
0154:  MOVWF  FA7
0156:  MOVLW  AA
0158:  MOVWF  FA7
015A:  BSF    FA6.1
015C:  BTFSC  FA6.1
015E:  BRA    015C
0160:  BCF    FA6.2
0162:  MOVF   00,W
0164:  IORWF  FF2,F
....................    } 
....................    reset_cpu(); 
0166:  RESET
.................... } 
....................  
0168:  BCF    FF2.1
016A:  MOVLB  0
016C:  GOTO   0084
.................... #int_EXT1 
.................... void  EXT1_isr(void)  
.................... { 
....................  
.................... } 
....................  
0170:  BCF    FF0.0
0172:  GOTO   0084
.................... #int_EXT2 
.................... void  EXT2_isr(void)  
.................... { 
....................  
.................... } 
....................  
....................  
....................  
....................  
0176:  BCF    FF0.1
0178:  GOTO   0084
.................... void main() 
.................... { 
*
04B8:  CLRF   FF8
04BA:  BCF    FD0.7
04BC:  BSF    07.7
04BE:  CLRF   FEA
04C0:  CLRF   FE9
04C2:  CLRF   1C
04C4:  CLRF   1B
04C6:  CLRF   1A
04C8:  CLRF   19
04CA:  CLRF   1F
04CC:  CLRF   21
04CE:  MOVLW  50
04D0:  MOVWF  20
04D2:  BSF    FC1.0
04D4:  BSF    FC1.1
04D6:  BSF    FC1.2
04D8:  BCF    FC1.3
....................    //set_tris_D(0);// this created trouble when resetting the cpu 
....................    delay_ms(500);//this is to prevent the mode change interrupt being called again 
04DA:  MOVLW  02
04DC:  MOVWF  31
04DE:  MOVLW  FA
04E0:  MOVWF  32
04E2:  RCALL  017C
04E4:  DECFSZ 31,F
04E6:  BRA    04DE
....................     
....................    setup_adc(ADC_CLOCK_INTERNAL); 
04E8:  BCF    FC1.6
04EA:  BSF    FC2.6
04EC:  BSF    FC2.7
04EE:  BCF    FC1.7
04F0:  BSF    FC2.0
....................    setup_adc_ports(AN0);//to read the touch input 
04F2:  BCF    FC1.0
04F4:  BSF    FC1.1
04F6:  BSF    FC1.2
04F8:  BSF    FC1.3
....................    set_adc_channel(0); 
04FA:  MOVLW  00
04FC:  MOVWF  01
04FE:  MOVF   FC2,W
0500:  ANDLW  C7
0502:  IORWF  01,W
0504:  MOVWF  FC2
....................     
....................    setup_timer_2(T2_DIV_BY_1,249,16);      //50.0 us overflow, 800 us interrupt 
0506:  MOVLW  78
0508:  IORLW  04
050A:  MOVWF  FCA
050C:  MOVLW  F9
050E:  MOVWF  FCB
....................    enable_interrupts(INT_TIMER2); 
0510:  BSF    F9D.1
....................    enable_interrupts(INT_EXT); 
0512:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1); 
0514:  BSF    FF0.3
....................    enable_interrupts(INT_EXT2); 
0516:  BSF    FF0.4
....................    enable_interrupts(GLOBAL); 
0518:  MOVLW  C0
051A:  IORWF  FF2,F
....................     
....................     
....................     
....................    count=0; 
051C:  CLRF   1D
....................     
....................    if(READ_EEPROM(0x0)==0) 
051E:  MOVFF  FF2,31
0522:  BCF    FF2.7
0524:  CLRF   FA9
0526:  BCF    FA6.6
0528:  BCF    FA6.7
052A:  BSF    FA6.0
052C:  MOVF   FA8,W
052E:  BTFSC  31.7
0530:  BSF    FF2.7
0532:  XORLW  00
0534:  BNZ   053A
....................    { 
....................       storePassword(); 
0536:  BRA    0282
....................    } 
....................     
....................    else 
0538:  BRA    053C
....................    { 
....................       checkPassword(); 
053A:  BRA    042A
....................    } 
....................    
.................... } 
....................  
.................... void storePassword(void) 
.................... { 
053C:  SLEEP 
....................    output_high(pin_D4);//indicate store mode 
*
0282:  BCF    F95.4
0284:  BSF    F8C.4
....................    ramNow=ramStart; 
0286:  MOVFF  21,23
028A:  MOVFF  20,22
....................     
....................    while(touch<0x3200) 
....................    { 
028E:  MOVF   27,F
0290:  BNZ   02BE
0292:  MOVF   26,F
0294:  BNZ   02BE
0296:  MOVF   25,W
0298:  SUBLW  31
029A:  BNC   02BE
....................    delay_us(10); 
029C:  MOVLW  10
029E:  MOVWF  00
02A0:  DECFSZ 00,F
02A2:  BRA    02A0
02A4:  NOP   
....................  //a small delay is required after setting the channel 
....................   
....................   
....................  //and before read 
....................   
.................... touch=read_adc(); 
02A6:  BSF    FC2.2
02A8:  BTFSC  FC2.2
02AA:  BRA    02A8
02AC:  MOVFF  FC3,24
02B0:  MOVFF  FC4,25
02B4:  CLRF   26
02B6:  CLRF   27
....................    output_high(pin_D7);//test 
02B8:  BCF    F95.7
02BA:  BSF    F8C.7
....................    } 
02BC:  BRA    028E
....................    output_low(pin_D7);//test 
02BE:  BCF    F95.7
02C0:  BCF    F8C.7
....................    timerReset=1; 
02C2:  MOVLW  01
02C4:  MOVWF  1F
....................    hit=1;    
02C6:  MOVWF  1E
....................    delay_ms(inputDelay);//make sure no repititive inputs are taken 
02C8:  MOVLW  64
02CA:  MOVWF  32
02CC:  RCALL  017C
....................    while(true) 
....................    { 
....................    /*test 
....................    output_toggle(pin_D7);//test 
....................    delay_ms(500);//test 
....................    */ 
....................     
....................    delay_us(10); 
02CE:  MOVLW  10
02D0:  MOVWF  00
02D2:  DECFSZ 00,F
02D4:  BRA    02D2
02D6:  NOP   
....................  //a small delay is required after setting the channel 
....................   
....................   
....................  //and before read 
....................   
.................... touch=read_adc(); 
02D8:  BSF    FC2.2
02DA:  BTFSC  FC2.2
02DC:  BRA    02DA
02DE:  MOVFF  FC3,24
02E2:  MOVFF  FC4,25
02E6:  CLRF   26
02E8:  CLRF   27
....................       if(((hit==0)&&(touch>0x3200))||((hit==1)&&(touch<0x3200))) 
02EA:  MOVF   1E,F
02EC:  BNZ   0306
02EE:  MOVF   27,F
02F0:  BNZ   0318
02F2:  MOVF   26,F
02F4:  BNZ   0318
02F6:  MOVF   25,W
02F8:  SUBLW  31
02FA:  BC    0306
02FC:  XORLW  FF
02FE:  BNZ   0318
0300:  MOVF   24,W
0302:  SUBLW  00
0304:  BNC   0318
0306:  DECFSZ 1E,W
0308:  BRA    0350
030A:  MOVF   27,F
030C:  BNZ   0350
030E:  MOVF   26,F
0310:  BNZ   0350
0312:  MOVF   25,W
0314:  SUBLW  31
0316:  BNC   0350
....................       { 
....................          if(hit==1) 
0318:  DECFSZ 1E,W
031A:  BRA    0320
....................             hit=0; 
031C:  CLRF   1E
....................          else 
031E:  BRA    0324
....................             hit=1; 
0320:  MOVLW  01
0322:  MOVWF  1E
....................          *ramNow=t; 
0324:  MOVFF  22,FE9
0328:  MOVFF  23,FEA
032C:  MOVFF  19,FEF
0330:  MOVFF  1A,FEC
0334:  MOVFF  1B,FEC
0338:  MOVFF  1C,FEC
....................          ramNow++; 
033C:  MOVLW  04
033E:  ADDWF  22,F
0340:  BTFSC  FD8.0
0342:  INCF   23,F
....................          count++; 
0344:  INCF   1D,F
....................          timerReset=1; 
0346:  MOVLW  01
0348:  MOVWF  1F
....................          delay_ms(inputDelay);//make sure no repititive inputs are taken 
034A:  MOVLW  64
034C:  MOVWF  32
034E:  RCALL  017C
....................       } 
....................     
....................       if(input(pin_A1)==1) 
0350:  BSF    F92.1
0352:  BTFSS  F80.1
0354:  BRA    035E
....................       { 
....................          store(); 
0356:  BRA    0202
....................          output_high(pin_D7);//test 
0358:  BCF    F95.7
035A:  BSF    F8C.7
....................          break; 
035C:  BRA    0360
....................       }     
....................    } 
035E:  BRA    02CE
.................... } 
0360:  GOTO   0538 (RETURN)
....................  
....................  
.................... // here the 'addressEEPROM is incremented within the' writeInt()' function. 
.................... void store(void) 
.................... { 
....................    ramNow=ramStart; 
*
0202:  MOVFF  21,23
0206:  MOVFF  20,22
....................    addressEEPROM=0x2; 
020A:  MOVLW  02
020C:  MOVWF  2E
....................    WRITE_EEPROM(0x1,count); 
020E:  MOVLW  01
0210:  MOVWF  FA9
0212:  MOVFF  1D,FA8
0216:  BCF    FA6.6
0218:  BCF    FA6.7
021A:  BSF    FA6.2
021C:  MOVF   FF2,W
021E:  MOVWF  00
0220:  BCF    FF2.7
0222:  MOVLB  F
0224:  MOVLW  55
0226:  MOVWF  FA7
0228:  MOVLW  AA
022A:  MOVWF  FA7
022C:  BSF    FA6.1
022E:  BTFSC  FA6.1
0230:  BRA    022E
0232:  BCF    FA6.2
0234:  MOVF   00,W
0236:  IORWF  FF2,F
....................    DELAY_MS(8); 
0238:  MOVLW  08
023A:  MOVWF  32
023C:  MOVLB  0
023E:  RCALL  017C
....................    for(j=0;j<count;j++) 
0240:  CLRF   2D
0242:  MOVF   1D,W
0244:  SUBWF  2D,W
0246:  BC    027E
....................    { 
....................        value=*ramNow; 
0248:  MOVFF  22,FE9
024C:  MOVFF  23,FEA
0250:  MOVFF  FEF,00
0254:  MOVFF  FEC,01
0258:  MOVFF  FEC,02
025C:  MOVFF  FEC,03
0260:  MOVFF  03,2B
0264:  MOVFF  02,2A
0268:  MOVFF  01,29
026C:  MOVFF  00,28
....................        writeInt(); 
0270:  BRA    01A2
....................        ramNow++; 
0272:  MOVLW  04
0274:  ADDWF  22,F
0276:  BTFSC  FD8.0
0278:  INCF   23,F
....................    } 
027A:  INCF   2D,F
027C:  BRA    0242
.................... } 
027E:  GOTO   0358 (RETURN)
....................  
....................  
.................... void checkPassword(void) 
.................... { 
....................     
....................    output_high(pin_D5);//indicate check mode 
*
042A:  BCF    F95.5
042C:  BSF    F8C.5
....................    ramNow=ramStart; 
042E:  MOVFF  21,23
0432:  MOVFF  20,22
....................     
....................    while(input(pin_A0)==0) 
....................    { 
0436:  BSF    F92.0
0438:  BTFSC  F80.0
043A:  BRA    0442
....................    output_high(pin_D6);//test 
043C:  BCF    F95.6
043E:  BSF    F8C.6
....................    } 
0440:  BRA    0436
....................    output_low(pin_D6);//test 
0442:  BCF    F95.6
0444:  BCF    F8C.6
....................    timerReset=1; 
0446:  MOVLW  01
0448:  MOVWF  1F
....................    hit=1; 
044A:  MOVWF  1E
....................    while(true) 
....................    { 
....................     
....................    output_toggle(pin_D6);//test 
044C:  BCF    F95.6
044E:  BTG    F8C.6
....................    delay_ms(500);//test 
0450:  MOVLW  02
0452:  MOVWF  31
0454:  MOVLW  FA
0456:  MOVWF  32
0458:  RCALL  017C
045A:  DECFSZ 31,F
045C:  BRA    0454
....................       if((hit==0&&(input(pin_A0)==1))||(hit==1&&(input(pin_A0)==0))) 
045E:  MOVF   1E,F
0460:  BNZ   0468
0462:  BSF    F92.0
0464:  BTFSC  F80.0
0466:  BRA    0472
0468:  DECFSZ 1E,W
046A:  BRA    04A4
046C:  BSF    F92.0
046E:  BTFSC  F80.0
0470:  BRA    04A4
....................       { 
....................          if(hit==1) 
0472:  DECFSZ 1E,W
0474:  BRA    047A
....................             hit=0; 
0476:  CLRF   1E
....................          else 
0478:  BRA    047E
....................             hit=1; 
047A:  MOVLW  01
047C:  MOVWF  1E
....................          *ramNow=t; 
047E:  MOVFF  22,FE9
0482:  MOVFF  23,FEA
0486:  MOVFF  19,FEF
048A:  MOVFF  1A,FEC
048E:  MOVFF  1B,FEC
0492:  MOVFF  1C,FEC
....................          ramNow++;count++; 
0496:  MOVLW  04
0498:  ADDWF  22,F
049A:  BTFSC  FD8.0
049C:  INCF   23,F
049E:  INCF   1D,F
....................          timerReset=1; 
04A0:  MOVLW  01
04A2:  MOVWF  1F
....................       } 
....................        
....................       if(input(pin_A1)==1) 
04A4:  BSF    F92.1
04A6:  BTFSS  F80.1
04A8:  BRA    04B2
....................       {       
....................          check(); 
04AA:  BRA    03B6
....................          output_high(pin_D6);//test 
04AC:  BCF    F95.6
04AE:  BSF    F8C.6
....................          break; 
04B0:  BRA    04B4
....................       }     
....................    } 
04B2:  BRA    044C
.................... } 
04B4:  GOTO   053C (RETURN)
....................  
....................  
.................... // here the 'addressEEPROM is incremented within the' writeInt()' function. 
.................... void check(void) 
.................... { 
....................    ramNow=ramStart; 
*
03B6:  MOVFF  21,23
03BA:  MOVFF  20,22
....................    addressEEPROM=0x2; 
03BE:  MOVLW  02
03C0:  MOVWF  2E
....................    if(READ_EEPROM(0x1)!=count) 
03C2:  MOVFF  FF2,31
03C6:  BCF    FF2.7
03C8:  MOVLW  01
03CA:  MOVWF  FA9
03CC:  BCF    FA6.6
03CE:  BCF    FA6.7
03D0:  BSF    FA6.0
03D2:  MOVF   FA8,W
03D4:  BTFSC  31.7
03D6:  BSF    FF2.7
03D8:  SUBWF  1D,W
03DA:  BZ    03DE
....................    { 
....................       //light the error led 
....................       while(true) 
....................       { 
....................       } 
03DC:  BRA    03DC
....................    } 
....................    for(j=0;j<count;j++) 
03DE:  CLRF   2D
03E0:  MOVF   1D,W
03E2:  SUBWF  2D,W
03E4:  BC    0426
....................    { 
....................        readInt(); 
03E6:  BRA    0364
....................        if(value!=*ramNow) 
03E8:  MOVFF  22,FE9
03EC:  MOVFF  23,FEA
03F0:  MOVFF  FEF,00
03F4:  MOVFF  FEC,01
03F8:  MOVFF  FEC,02
03FC:  MOVFF  FEC,03
0400:  MOVF   00,W
0402:  SUBWF  28,W
0404:  BNZ   0418
0406:  MOVF   01,W
0408:  SUBWF  29,W
040A:  BNZ   0418
040C:  MOVF   02,W
040E:  SUBWF  2A,W
0410:  BNZ   0418
0412:  MOVF   03,W
0414:  SUBWF  2B,W
0416:  BZ    041A
....................        { 
....................          //light the error led 
....................          while(true) 
....................          { 
....................          } 
0418:  BRA    0418
....................        } 
....................        ramNow++; 
041A:  MOVLW  04
041C:  ADDWF  22,F
041E:  BTFSC  FD8.0
0420:  INCF   23,F
....................    } 
0422:  INCF   2D,F
0424:  BRA    03E0
....................  
.................... } 
0426:  GOTO   04AC (RETURN)
....................  
....................  
.................... // global variable 'addressEEPROM' should be set to the starting address of the int in EEPROM 
.................... int32 readInt(void) 
.................... { 
....................    addressRAM = &value; 
*
0364:  CLRF   30
0366:  MOVLW  28
0368:  MOVWF  2F
....................    for(i=0;i<4;i++) 
036A:  CLRF   2C
036C:  MOVF   2C,W
036E:  SUBLW  03
0370:  BNC   03A2
....................    { 
....................       *addressRAM = READ_EEPROM(addressEEPROM); 
0372:  MOVFF  30,03
0376:  MOVF   2F,W
0378:  MOVWF  FE9
037A:  MOVFF  03,FEA
037E:  MOVFF  FF2,33
0382:  BCF    FF2.7
0384:  MOVFF  2E,FA9
0388:  BCF    FA6.6
038A:  BCF    FA6.7
038C:  BSF    FA6.0
038E:  MOVF   FA8,W
0390:  BTFSC  33.7
0392:  BSF    FF2.7
0394:  MOVWF  FEF
....................       addressRAM++; 
0396:  INCF   2F,F
0398:  BTFSC  FD8.2
039A:  INCF   30,F
....................       addressEEPROM++; 
039C:  INCF   2E,F
....................    } 
039E:  INCF   2C,F
03A0:  BRA    036C
....................    return value; 
03A2:  MOVFF  28,00
03A6:  MOVFF  29,01
03AA:  MOVFF  2A,02
03AE:  MOVFF  2B,03
.................... } 
03B2:  GOTO   03E8 (RETURN)
....................  
.................... // global variable 'addressEEPROM' should be set to the starting address of the int in EEPROM and 'value' to the int to be written 
.................... void writeInt(void) 
.................... { 
....................    addressRAM = &value; 
*
01A2:  CLRF   30
01A4:  MOVLW  28
01A6:  MOVWF  2F
....................    for(i=0;i<4;i++) 
01A8:  CLRF   2C
01AA:  MOVF   2C,W
01AC:  SUBLW  03
01AE:  BNC   01FE
....................    { 
....................       WRITE_EEPROM(addressEEPROM,*addressRAM); 
01B0:  MOVFF  30,03
01B4:  MOVF   2F,W
01B6:  MOVWF  FE9
01B8:  MOVFF  03,FEA
01BC:  MOVFF  FEF,31
01C0:  MOVFF  2E,FA9
01C4:  MOVFF  31,FA8
01C8:  BCF    FA6.6
01CA:  BCF    FA6.7
01CC:  BSF    FA6.2
01CE:  MOVF   FF2,W
01D0:  MOVWF  00
01D2:  BCF    FF2.7
01D4:  MOVLB  F
01D6:  MOVLW  55
01D8:  MOVWF  FA7
01DA:  MOVLW  AA
01DC:  MOVWF  FA7
01DE:  BSF    FA6.1
01E0:  BTFSC  FA6.1
01E2:  BRA    01E0
01E4:  BCF    FA6.2
01E6:  MOVF   00,W
01E8:  IORWF  FF2,F
....................       addressRAM++; 
01EA:  INCF   2F,F
01EC:  BTFSC  FD8.2
01EE:  INCF   30,F
....................       addressEEPROM++; 
01F0:  INCF   2E,F
....................       DELAY_MS(8); 
01F2:  MOVLW  08
01F4:  MOVWF  32
01F6:  MOVLB  0
01F8:  RCALL  017C
....................    } 
01FA:  INCF   2C,F
01FC:  BRA    01AA
....................     
....................     
.................... } 
01FE:  GOTO   0272 (RETURN)

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
